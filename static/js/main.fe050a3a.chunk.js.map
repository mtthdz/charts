{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","selectionEvent","event","setState","userSelection","target","value","submitEvent","preventDefault","lookupValue","state","memeList","amd","tsla","msft","spce","axios","url","method","responseType","params","symbol","apikey","function","interval","outputsize","then","response","rawData","data","cleanData","key","unshift","label","slice","time","Number","replace","price","volume","maximum","Math","max","apply","map","o","minimum","min","arrayLength","length","companyName","latestPrice","openingPrice","latestPriceString","openingPriceString","latestVolumeString","color","chartData","maxVal","minVal","displayName","displayOpen","displayCurrent","displayVolume","handleKeyDown","className","action","onChange","this","name","onClick","width","height","margin","top","right","bottom","left","dataKey","stroke","dot","strokeWidth","type","domain","tick","hide","y","strokeDasharray","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fe050a3a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ReferenceLine } from 'recharts';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userSelection: '',\n      chartData: [],\n      maxVal: 0,\n      minVal: 0,\n\n      displayName: '',\n      displayOpen: '',\n      displayCurrent: '',\n      displayVolume: '',\n      color: '#20e371',\n    };\n  }\n\n\n  // selection variable store\n  selectionEvent = (event) => {\n    this.setState({\n      userSelection: event.target.value,\n    })\n  }\n\n\n  submitEvent = (event) => {\n    event.preventDefault();\n    const lookupValue = this.state.userSelection;\n    const apiKey = 'G7PA4WVLPU036EB6'; // api key\n    const memeList = {\n      amd: 'Advanced Micro Devices, Inc. ($AMD)',\n      tsla: 'Tesla, Inc ($TSLA)',\n      msft: 'Microsoft Corporation ($MSFT)',\n      spce: 'Virgin Galactic Holdings, Inc. ($SPCE)',\n    }\n\n    axios({\n      url: 'https://www.alphavantage.co/query?',\n      method: 'GET',\n      responseType: 'json',\n      params: {\n        symbol: lookupValue, // input value stored when user hit enter key\n        apikey: apiKey, // api key\n        function: 'TIME_SERIES_INTRADAY',\n        interval: '1min',\n        outputsize: 'full',\n      }\n    }).then((response) => {\n      const rawData = response.data['Time Series (1min)']; // created object of \n      const cleanData = [];\n\n      // chart data\n      for (let key in rawData) {\n        cleanData.unshift({\n          label: key.slice(11, 16),\n          time: Number(key.slice(11, 16).replace(':', '.')),\n          price: Number(rawData[key]['4. close']),\n          volume: Number(rawData[key]['5. volume'])\n        })\n      }\n\n      const maximum = Math.max.apply(Math, cleanData.map(function (o) { return o.price }));\n      const minimum = Math.min.apply(Math, cleanData.map(function (o) { return o.price }));\n\n      const arrayLength = cleanData.length - 1\n      const companyName = memeList[lookupValue];\n      const latestPrice = cleanData[arrayLength].price;\n      const openingPrice = cleanData[0].price;\n      const latestPriceString = `Current price: $${cleanData[arrayLength].price}`;\n      const openingPriceString = `Opening price: $${cleanData[0].price}`;\n      const latestVolumeString = `Current trading volume: ${cleanData[arrayLength].volume}`;\n      const red = '#e33720';\n\n      if(openingPrice > latestPrice) {\n        this.setState({\n          color: red,\n        })\n      }\n\n      this.setState({\n        chartData: cleanData,\n        maxVal: maximum,\n        minVal: minimum,\n        displayName: companyName,\n        displayOpen: openingPriceString,\n        displayCurrent: latestPriceString,\n        displayVolume: latestVolumeString,\n      })\n    })\n  }\n\n\n  handleKeyDown = (event) => {\n    if (event.key === 'Enter') {\n      \n    }\n  }\n\n\n  render() {\n    return (\n      <div className='wrapper App'>\n\n        <header className='head'>\n          <h1 className='head-title'>tendies tracker</h1>\n          <p className='head-instructions'>Select one the hottest meme stocks (from the dropdown menu) to track.</p>\n        </header>\n\n        <div className='selection'>\n          <form className='selection-container' action=''>\n            <select className='selection-dropdown' onChange={this.selectionEvent} name='security-selection'>\n              <option value=''></option>\n              <option value='amd'>$AMD</option>\n              <option value='msft'>$MSFT</option>\n              <option value='spce'>$SPCE</option>\n              <option value='tsla'>$TSLA</option>\n            </select>\n\n            <button className='selection-button' onClick={this.submitEvent}>track</button>\n          </form>\n        </div>\n\n        <main className='chart-container'>\n          <div className='company-details'>\n            <h2 className='company-name'>{this.state.displayName}</h2>\n            <p className='company-meta'>{this.state.displayCurrent}</p>\n            <p className='company-meta'>{this.state.displayOpen}</p>\n            <p className='company-meta'>{this.state.displayVolume}</p>\n          </div>\n\n          <LineChart \n            className='chart'\n            width={600} height={350} \n            data={this.state.chartData}\n            margin={{ top: 20, right: 50, bottom: 20, left: 0 }}\n          >\n            <Line dataKey='price' stroke={this.state.color} dot={false} strokeWidth={1.5}/>\n            <XAxis dataKey='label' stroke={'#ffffff'} />\n            <YAxis dataKey='price' type='number' domain={[this.state.minVal, this.state.maxVal]} tick={false} hide={true} stroke={'#ffffff'} />\n            <Tooltip />\n            <ReferenceLine y={this.state.displayOpen} stroke=\"#000000\" strokeDasharray=\"3 3\" />\n          </LineChart>\n        </main>\n\n        <footer className='foot'>\n          <p className='disclaimer'> All data displayed on this website is not accurate real-time trading data. Any and all trades based on information displayed on this website is made at the sole discretion of the user. </p>\n          <p className='disclaimer'>financial data fetched from alphavantage.co</p>\n        </footer>\n      </div>  \n    );\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}